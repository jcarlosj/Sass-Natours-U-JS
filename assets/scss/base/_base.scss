// Reset all elements
*,
*::after,
*::before {
    box-sizing: inherit;
    margin: 0;
    padding: 0;
}

html {
    // #px (deseados 10px) / #px (por defecto 16px) = 62.5% >>> para que 1rem equivalga a #px deseados
    font-size: 62.5%;   // root (font-size): 1rem equivale a 10px, no 16px (valor por defecto). 
                        //      Es una mala practica definir valor en px y no ayuda al comportamiento cuando se hace zoom en el navegador.
                        //      Entonces se calcula el valor de 10px evitando usar unidades de medida con la siguiente formula 10px (unidad deseada en base 10) / 16px (valor por defecto del navegador) = 62.5% (porcentaje que representa la medida estandar deseada)
                        //          0.625% * 16px = 10px        (10px seria el valor por defecto, es recomendable transformarlo de esta manera para que quede en base 10)
                        //          0.625% * 20px = 12.5px      (12.5px seria el valor por defecto para este caso)
                        //          0.625% * 22px = 13.75px     (13.75px seria el valor por defecto para este caso)

    @include respond( big-desktop ) {   // width <= 1800
        font-size: 75%;     // 12px (deseados) / 16px (por defecto) = 75% >>> para que 1rem equivalga 12px
    }

    // Implementa mixin: Tama√±o de fuente por defecto para cada dispositivo (usando breakpoints)
    @include respond( tab-land ) {  // width < 1200?
        font-size: 56.25%;  // 9px (deseados) / 16px (por defecto) = 56.25% >>> para que 1rem equivalga 9px
    }
    @include respond( tab-port ) {  // width < 900?
        font-size: 50%;     // 8px (deseados) / 16px (por defecto) = 50% >>> para que 1rem equivalga 8px
    }
    @include respond( phone ) {  // width < 600?
        font-size: 30%;     // 4.8px (deseados) / 16px (por defecto) = 30% >>> para que 1rem equivalga 4.8px
    }

}

body {
    box-sizing: border-box;
}